// Generated by LiveScript 1.4.0
(function(){
  var _, LET_RE, x$;
  _ = require('lodash');
  LET_RE = /^\s*([\s\S]+?)\s+=\s+([\s\S]+?)\s*$/;
  x$ = angular.module('app', ['RecursionHelper', 'ui.codemirror', 'ui.select', 'ngBootbox']);
  x$.controller("Ctrl", function($scope, $timeout, $ngBootbox){
    var submitCm;
    submitCm = function(cm, parent){
      var calc, thisIdx, thisId, success, error;
      cm.removeOverlay(cm.currentOverlay);
      calc = cm.parent;
      calc.output = null;
      calc.error = null;
      calc.loading = true;
      thisIdx = _.findIndex($scope.history, function(h){
        return h.id === calc.id;
      });
      thisId = thisIdx + 1;
      success = function(output){
        return $timeout(function(){
          calc.output = output.fromJar;
          calc.fromNearley = output.fromNearley;
          if (thisId === $scope.history.length) {
            $scope.history.push({
              id: thisId + 1,
              input: "",
              output: null,
              error: null
            });
          }
          return calc.loading = false;
        });
      };
      error = function(err){
        return $timeout(function(){
          var line, offset;
          calc.error = {
            msg: err.message,
            stack: err.stack,
            stackshow: false
          };
          line = err.line - 1;
          offset = err.offset + 1;
          while (offset >= cm.getLine(line).length) {
            offset = offset - cm.getLine(line).length - 1;
            line += 1;
          }
          cm.currentOverlay = errorOverlay(cm.getLine(line), offset);
          cm.addOverlay(cm.currentOverlay);
          return calc.loading = false;
        });
      };
      if (thisIdx === 0) {
        bellmaniaParse({
          isTactic: false,
          text: calc.input
        }, success, error);
      } else {
        bellmaniaParse({
          isTactic: true,
          text: calc.input,
          termJson: _.last($scope.history[thisIdx - 1].output).value.term
        }, success, error);
      }
      cm.getInputField().blur();
      $scope.mostRecentId = thisId;
      return $scope.$apply();
    };
    $scope.cmOptions = cmOptions();
    $scope.wrapper = function(parent){
      var submitCallback, loadCallback;
      submitCallback = function(cm){
        return submitCm(cm, parent);
      };
      loadCallback = function(cm){
        cm.parent = parent;
        return parent.cm = cm;
      };
      return initEditor(submitCallback, loadCallback);
    };
    $scope.history = [{
      id: 1,
      input: "a b",
      output: null,
      error: null
    }];
    $scope.mostRecentId = 1;
    $scope.isInvalid = function(h){
      return $scope.mostRecentId < h.id && h.output !== null;
    };
    $scope.output = {};
    $scope.data = [];
    $scope.reset = function(){
      return $scope.history = [{
        id: 1,
        input: "",
        output: null,
        error: null
      }];
    };
    $scope.save = function(){
      return $ngBootbox.prompt("Save file as:", "newfile.json").then(function(filename){
        var saveText, bb, blobURL, anchor;
        saveText = JSON.stringify({
          mostRecentId: $scope.mostRecentId,
          history: _.map($scope.history, function(h){
            return {
              id: h.id,
              input: h.input
            };
          })
        });
        bb = new Blob([saveText], {
          type: "application/json"
        });
        blobURL = (window.URL || window.webkitURL).createObjectURL(bb);
        anchor = document.createElement("a");
        anchor.download = filename;
        anchor.href = blobURL;
        return anchor.click();
      });
    };
    $scope.load = function(){
      var reader;
      if ($scope.file) {
        reader = new FileReader();
        reader.onload = function(){
          var message;
          try {
            $scope.$apply(function(){
              var loaded;
              loaded = JSON.parse(reader.result);
              $scope.mostRecentId = loaded.mostRecentId;
              return $scope.history = _.map(loaded.history, function(h){
                h.error = null;
                h.output = null;
                return h;
              });
            });
            return $timeout(function(){
              return async.series(_.map($scope.history, function(h){
                return function(callback){
                  submitCm(h.cm, h);
                  return setTimeout(callback, 5000);
                };
              }));
            });
          } catch (e$) {
            message = e$.message;
            return bootbox.alert(message);
          }
        };
        return reader.readAsText($scope.file);
      }
    };
    $scope.toggleStackShow = function(err){
      return err.stackshow = !err.stackshow;
    };
  });
  x$.filter("collapse", function(){
    var lead;
    lead = function(it){
      return it.match(/^\s*/)[0].length;
    };
    return function(input, indent){
      return ("" + input).split(/\n/).filter(function(it){
        return lead(it) < indent;
      }).join("\n");
    };
  });
  x$.directive("display", function(RecursionHelper){
    return {
      restrict: 'E',
      scope: {
        o: '=o'
      },
      template: $('#display').html(),
      compile: function(element){
        return RecursionHelper.compile(element);
      }
    };
  });
  x$.directive("compute", function(){
    return {
      scope: {},
      transclude: 'element',
      link: function(scope, element, attrs, ctrl, $transclude){
        var expr, mo, lhs, rhs;
        expr = attrs['let'];
        mo = expr != null ? expr.match(LET_RE) : void 8;
        if (mo == null) {
          throw Error("invalid let '" + expr + "'");
        }
        lhs = mo[1];
        rhs = mo[2];
        return $transclude(function(clone, scope){
          scope.$watch(rhs, function(v){
            return scope[lhs] = v;
          }, true);
          return $(clone).insertAfter(element);
        });
      }
    };
  });
  x$.directive('fileChange', function(){
    return {
      restrict: 'A',
      require: 'ngModel',
      scope: {
        fileChange: '&'
      },
      link: function(scope, element, attrs, ctrl){
        var onChange;
        onChange = function(){
          ctrl.$setViewValue(element[0].files[0]);
          return scope.fileChange();
        };
        element.on('change', onChange);
        return scope.$on('destroy', function(){
          return element.off('change', onChange);
        });
      }
    };
  });
  x$.filter("isString", function(){
    return _.isString;
  });
  x$.filter("display", function(){
    var f;
    return f = function(input){
      var last, text, x$, i$, ref$, len$, ref1$, ref2$, u, v, mark, x, y, cls;
      if (_.isString(input)) {
        return [input];
      } else if (input.tape != null) {
        last = 0;
        text = input.tape.text;
        x$ = [];
        for (i$ = 0, len$ = (ref$ = input.tape.markup).length; i$ < len$; ++i$) {
          ref1$ = ref$[i$], ref2$ = ref1$[0], u = ref2$[0], v = ref2$[1], mark = ref1$[1];
          x = text.substring(last, u);
          y = text.substring(u, v);
          cls = ['mark'].concat(mark.type != null
            ? ['tip']
            : []);
          last = v;
          if (x.length) {
            x$.push([x]);
          }
          if (y.length) {
            x$.push([y, cls, mark.type]);
          }
        }
        x = text.substring(last);
        if (x.length) {
          x$.push([x]);
        }
        return x$;
      } else {
        return [JSON.stringify(input)];
      }
    };
  });
}).call(this);
