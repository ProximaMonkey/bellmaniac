// Generated by LiveScript 1.4.0
(function(){
  var _, fs, path, LET_RE, EXAMPLES_DIR, x$;
  _ = require('lodash');
  fs = require('fs');
  path = require('path');
  LET_RE = /^\s*([\s\S]+?)\s+=\s+([\s\S]+?)\s*$/;
  EXAMPLES_DIR = "../Bellmaniac/examples/intermediates";
  x$ = angular.module('app', ['RecursionHelper', 'ui.codemirror']);
  x$.controller("Ctrl", function($scope, $timeout){
    var initState;
    initState = function(){
      $scope.parsed = [];
      $scope.output = [];
      $scope.errorMsg = "";
      if ($scope.cm) {
        return $scope.cm.removeOverlay($scope.cm.currentOverlay);
      }
    };
    $scope.code = localStorage.getItem('codeMirrorContents') || "a b";
    initState();
    $scope.cmOptions = cmOptions();
    $scope.loaded = initEditor(function(cm){}, function(cm){
      return $scope.cm = cm;
    });
    $scope.prefix = function(s){
      return s.match(/(.*?)-/)[1] || s;
    };
    $scope.examples = ["Paren-A", "Paren-B", "Paren-C", "LCS-A", "Gap-A", "Gap-B", "Gap-C", "Accordion-A", "Accordion-B", "Accordion-C", "Accordion-D", "Knapsack-A", "Knapsack-B", "Bitonic-A", "Bitonic-B", "Bitonic-C"];
    $scope.open = function(){
      var filename;
      if ($scope.filename === null) {
        $scope.code = "";
      } else {
        filename = path.join(EXAMPLES_DIR, $scope.filename + ".synopsis.txt");
        $scope.code = fs.readFileSync(filename, "utf-8");
      }
    };
    $scope.parseAndDisplay = function(){
      var success, error;
      initState();
      success = function(output){
        return $timeout(function(){
          $scope.parsed = output.fromNearley;
          return $scope.output = output.fromJar;
        });
      };
      error = function(err, output){
        return $timeout(function(){
          $scope.errorMsg = err.message;
          $scope.cm.currentOverlay = errorOverlay($scope.cm.getLine(err.line - 1), err.offset + 1);
          $scope.cm.addOverlay($scope.cm.currentOverlay);
          return $scope.parsed = output != null ? output.fromNearley : void 8;
        });
      };
      bellmaniaParse({
        isTactic: false,
        dryRun: true,
        text: $scope.code
      }, success, error);
    };
  });
  x$.filter("collapse", function(){
    var lead;
    lead = function(it){
      return it.match(/^\s*/)[0].length;
    };
    return function(input, indent){
      return ("" + input).split(/\n/).filter(function(it){
        return lead(it) < indent;
      }).join("\n");
    };
  });
  x$.directive("display", function(RecursionHelper){
    return {
      restrict: 'E',
      scope: {
        o: '=o'
      },
      template: $('#display').html(),
      compile: function(element){
        return RecursionHelper.compile(element);
      }
    };
  });
  x$.directive("compute", function(){
    return {
      scope: {},
      transclude: 'element',
      link: function(scope, element, attrs, ctrl, $transclude){
        var expr, mo, lhs, rhs;
        expr = attrs['let'];
        mo = expr != null ? expr.match(LET_RE) : void 8;
        if (mo == null) {
          throw Error("invalid let '" + expr + "'");
        }
        lhs = mo[1];
        rhs = mo[2];
        return $transclude(function(clone, scope){
          scope.$watch(rhs, function(v){
            return scope[lhs] = v;
          }, true);
          return $(clone).insertAfter(element);
        });
      }
    };
  });
  x$.filter("isString", function(){
    return _.isString;
  });
  x$.filter("display", function(){
    return function(input){
      var last, text, x$, i$, ref$, len$, ref1$, ref2$, u, v, mark, x, y, cls;
      if (_.isString(input)) {
        return input;
      } else if (input.tape != null) {
        last = 0;
        text = input.tape.text;
        x$ = [];
        for (i$ = 0, len$ = (ref$ = input.tape.markup).length; i$ < len$; ++i$) {
          ref1$ = ref$[i$], ref2$ = ref1$[0], u = ref2$[0], v = ref2$[1], mark = ref1$[1];
          x = text.substring(last, u);
          y = text.substring(u, v);
          cls = ['mark'].concat(mark.type != null
            ? ['tip']
            : []);
          last = v;
          if (x.length) {
            x$.push([x]);
          }
          if (y.length) {
            x$.push([y, cls, mark.type]);
          }
        }
        x = text.substring(last);
        if (x.length) {
          x$.push([x]);
        }
        return x$;
      } else {
        return [JSON.stringify(input)];
      }
    };
  });
}).call(this);
