// Generated by LiveScript 1.4.0
(function(){
  var root, hintWords, autoWords, i$, ref$, len$, i, charCode, letter, findCurWord, findSuffixWord, hintReplace, autoReplace;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  hintWords = [
    {
      text: "α",
      displayText: "\\alpha"
    }, {
      text: "β",
      displayText: "\\beta"
    }, {
      text: "γ",
      displayText: "\\gamma"
    }, {
      text: "δ",
      displayText: "\\delta"
    }, {
      text: "ε",
      displayText: "\\epsilon"
    }, {
      text: "ζ",
      displayText: "\\zeta"
    }, {
      text: "η",
      displayText: "\\eta"
    }, {
      text: "θ",
      displayText: "\\theta"
    }, {
      text: "ι",
      displayText: "\\iota"
    }, {
      text: "κ",
      displayText: "\\kappa"
    }, {
      text: "λ",
      displayText: "\\lambda"
    }, {
      text: "μ",
      displayText: "\\mu"
    }, {
      text: "ν",
      displayText: "\\nu"
    }, {
      text: "ξ",
      displayText: "\\xi"
    }, {
      text: "ο",
      displayText: "\\omicron"
    }, {
      text: "π",
      displayText: "\\pi"
    }, {
      text: "ρ",
      displayText: "\\rho"
    }, {
      text: "σ",
      displayText: "\\sigma"
    }, {
      text: "τ",
      displayText: "\\tau"
    }, {
      text: "υ",
      displayText: "\\upsilon"
    }, {
      text: "φ",
      displayText: "\\phi"
    }, {
      text: "χ",
      displayText: "\\chi"
    }, {
      text: "ψ",
      displayText: "\\psi"
    }, {
      text: "ω",
      displayText: "\\omega"
    }, {
      text: "×",
      displayText: "\\times"
    }, {
      text: "∩",
      displayText: "\\cap"
    }
  ];
  autoWords = [
    {
      text: "↦",
      displayText: "|->"
    }, {
      text: "\u27E8",
      displayText: "\\<"
    }, {
      text: "\u27E9",
      displayText: "\\>"
    }, {
      text: "×",
      displayText: "\\*"
    }
  ];
  for (i$ = 0, len$ = (ref$ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]).length; i$ < len$; ++i$) {
    i = ref$[i$];
    charCode = 0x2080 + i;
    autoWords.push({
      text: String.fromCharCode(charCode),
      displayText: "_" + i
    });
  }
  for (i$ = 0, len$ = (ref$ = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]).length; i$ < len$; ++i$) {
    letter = ref$[i$];
    charCode = 0xdd30 + letter.charCodeAt(0) - 0x41;
    autoWords.push({
      text: "\ud83c" + String.fromCharCode(charCode),
      displayText: "[" + letter + "]"
    });
    autoWords.push({
      text: "\ud83c" + String.fromCharCode(charCode) + "\u0332",
      displayText: "[" + letter + "_]"
    });
  }
  findCurWord = function(editor, delimiters){
    var whitespace, cur, curLine, ref$, start, end, curWord;
    whitespace = /\s/;
    cur = editor.getCursor();
    curLine = editor.getLine(cur.line);
    ref$ = [cur.ch - 1, cur.ch], start = ref$[0], end = ref$[1];
    while (start >= 0 && !delimiters.test(curLine.charAt(start)) && !whitespace.test(curLine.charAt(start - 1))) {
      start -= 1;
    }
    curWord = start !== end ? curLine.slice(start, end) : "";
    return {
      word: curWord,
      start: start,
      end: end
    };
  };
  findSuffixWord = function(editor, words){
    var cur, curLine, matches, ref$, start, end, i, c;
    cur = editor.getCursor();
    curLine = editor.getLine(cur.line);
    matches = [];
    ref$ = [cur.ch - 1, cur.ch, 1], start = ref$[0], end = ref$[1], i = ref$[2];
    while (start >= 0 && words.length > 0) {
      c = curLine.charAt(start);
      words = words.filter(fn$);
      matches = matches.concat(words.filter(fn1$).map(fn2$));
      start -= 1;
      i += 1;
    }
    return matches;
    function fn$(it){
      var ref$;
      return (ref$ = it.displayText)[ref$.length - i] === c;
    }
    function fn1$(it){
      return it.displayText.length === i;
    }
    function fn2$(it){
      return {
        word: it,
        start: start,
        end: end
      };
    }
  };
  hintReplace = function(editor){
    var curPos, curWord, cur, filteredWords;
    curPos = findCurWord(editor, /\\/);
    curWord = curPos.word;
    cur = editor.getCursor();
    filteredWords = hintWords.filter(function(w){
      return curWord.length > 0 && w.displayText.indexOf(curWord) === 0;
    });
    return {
      list: filteredWords,
      from: CodeMirror.Pos(cur.line, curPos.start),
      to: CodeMirror.Pos(cur.line, curPos.end)
    };
  };
  autoReplace = function(editor){
    var cur, filteredWords, curPos;
    cur = editor.getCursor();
    filteredWords = findSuffixWord(editor, autoWords);
    if (filteredWords.length > 0) {
      curPos = filteredWords[0];
      return editor.replaceRange(curPos.word.text, CodeMirror.Pos(cur.line, curPos.start), CodeMirror.Pos(cur.line, curPos.end));
    }
  };
  root.cmOptions = function(){
    return {
      mode: "bellmania",
      matchBrackets: {
        bracketRegex: /[(){}[\]⟨⟩]/,
        bracketMatching: {
          "(": ")>",
          ")": "(<",
          "[": "]>",
          "]": "[<",
          "{": "}>",
          "}": "{<",
          "⟨": "⟩>",
          "⟩": "⟨<"
        }
      },
      theme: "neat",
      viewportMargin: Infinity
    };
  };
  root.initEditor = function(submitCallback, loadedCallback){
    return function(editor){
      CodeMirror.registerHelper("hint", "anyword", hintReplace);
      CodeMirror.commands.autocomplete = function(cm){
        return cm.showHint({
          hint: CodeMirror.hint.anyword,
          completeSingle: false
        });
      };
      editor.on('change', function(editor, changeObj){
        var text, valid;
        localStorage.setItem('codeMirrorContents', editor.getValue());
        text = changeObj.text[0];
        valid = text != null && text.length === 1 && ((text >= "a" && text <= "z") || (text >= "A" && text <= "Z") || (text >= "0" && text <= "9") || (text === ';' || text === '=' || text === ',' || text === '-' || text === '.' || text === '/' || text === '`' || text === '[' || text === '\\' || text === ']' || text === '\'' || text === '<' || text === '>' || text === '*'));
        if (valid) {
          autoReplace(editor);
          CodeMirror.commands.autocomplete(editor);
        }
      });
      if (submitCallback) {
        editor.setOption("extraKeys", {
          "Cmd-Enter": submitCallback
        });
      }
      if (loadedCallback) {
        return loadedCallback(editor);
      }
    };
  };
}).call(this);
