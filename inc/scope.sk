bit ENABLE_OFFSETS = 1;

/* SHOULD BE AUTOGENED */
bit __I(int i) { return 0; }
bit __J(int i) { return 0; }

// partitioning points
bit[2] d_bits(int dom, int i);
int d(int dom, int i) { int sum = 0; for (int k = 0; k < i; k++) { bit[2] b = d_bits(dom, k); sum += 2*b[1]+b[0]; } return sum; }


generator bit Scope_subsort_offset(int _u, bit[2] b, int i) {
    return Scope_subsort(_u, i) || (b[0] && Scope_subsort(_u, i + 1))
                                || (b[1] && Scope_subsort(_u, i - 1));
}


/*
generator bit Scope_subsort_min(int i) {
    int _u = ??;
    if (ENABLE_OFFSETS) {
        bit[2] b = ??;
        minimize(_u*4+b[1]+b[0]);
        return Scope_subsort(_u, b, i);
    }
    else {
        minimize(_u);
        return Scope_subsort(_u, {0,0}, i);
    }
}*/

bit Scope_2d(bit[W,3,W,3] t, bit lt, int i, int j) {
  bit acc = false;
  for (int p = 0; p < W; ++p)
    for (int ps = -1; ps < 2; ps++)
      for (int q = 0; q < W; ++q)
        for (int qs = -1; qs < 2; qs++) {
          if (!ENABLE_OFFSETS) {
            if (ps != 0 || qs != 0) assert(t[p,ps+1,q,qs+1] == 0);
          }
          //if (ps < 0 || qs < 0) assert(t[p,ps+1,q,qs+1] == 0);  // Ideally, this would need to be minimized 
          if (t[p,ps+1,q,qs+1])
            acc = acc || ( Scope_leaf(p, ps+i) && Scope_leaf(q, qs+j) );
        }
  if (lt) acc = acc && (i < j);
  return acc;
}

/* left here as reference */
bit Scope_2d_easy(bit[W,W] t, bit lt, int i, int j) {
  bit acc = false;
  for (int p = 0; p < W; ++p)
    for (int q = 0; q < W; ++q)
      if (t[p,q])
        acc = acc || ( Scope_leaf(p, i) && Scope_leaf(q, j) );
  if (lt) acc = acc && (i < j);
  return acc;
}

bit param(int u, int i) {
  if (u == 0) return P1(i);
  else if (u == 1) return P2(i);
  else if (u == 2) return P3(i);
  else assert(false);
}

int K = 3;

bit Scope_2d_easier(bit[K,K] t, bit lt, int i, int j) {
  bit acc = false;
  int k = nparams();
  for (int p = 0; p < k; ++p)
    for (int q = 0; q < k; ++q)
      if (t[p,q])
        acc = acc || (param(p, i) && param(q, j));

  if (lt) acc = acc && (i < j);
  return acc;
}

generator int minimal(int i) { minimize(i); return i; }

generator bit minimal_1(bit b) { minimize(b); return b; }
generator bit[W] minimal_W(bit[W] a) { for (int i = 0; i < W; ++i) minimize(a[i]); return a; }
generator bit[W][W] minimal_WxW(bit[W][W] a) { 
  for (int i = 0; i < W; ++i) for (int j = 0; j < W; ++j) minimize(a[i][j]); return a; }
