
int t1 = ??;
int t2 = ??;
int t3 = ??;

bit[2] offsets(bit[2] x) { return x; }

@OffsetsForParam("P₁") bit[2] b1() { return offsets(??); }
@OffsetsForParam("P₂") bit[2] b2() { return offsets(??); }
@OffsetsForParam("P₃") bit[2] b3() { return offsets(??); }

#define RANK(t, b) ((t)*3 + (b)[0] + (b)[1])
generator int rank(int t, bit[2] b) { return t*3+b[0]+b[1]; }

@Param("P")  bit P(int i)  { return Scope_subsort(??, i); }
@Param("P₁") bit P1(int i) { return Scope_subsort_offset(t1, b1(), i); }
@Param("P₂") bit P2(int i) { return Scope_subsort_offset(t2, b2(), i); }
@Param("P₃") bit P3(int i) { return Scope_subsort_offset(t3, b3(), i); }

@Inv("Q") bit Q(int i, int j) { return (Scope_2d_easier(/*minimal_4x4*/(??), minimal_1(??), i, j) || X(i,j)); }


generator |scalar| Context_JJR(int i, int j) { return psi(i,j); }

|scalar| thetaQ(int i, int j) { return only(Q(i,j), theta(i,j)); }



|scalar| bot2d(int i, int j) { return bot; }

//#define EXHAUST_IJ

pragma options "--bnd-unroll-amnt 8";

pragma options "--bnd-mbits 7";    /* this is needed because hole is multiplied by 6 */


harness void test1(int n 
#ifndef EXHAUST_IJ
                   , int i, int j
#endif
                   ) {

  n = Scope_facts(n);
  assume n <= 8 && n > 0;
  //N = n;


#ifndef EXHAUST_IJ
  assume i < n && i >= 0;
  assume j < n && j >= 0;
#endif
 
 
  |scalar| jones(int x, int y) { return h(n, /*bot2d*/theta, x, y); }

  bit ind = ??;

/*
  int tmax = t1;
  int bsum = b1()[0];
  if (nparams() > 1) { tmax = max2i(tmax, t2); bsum += b2()[0]; }
  if (nparams() > 2) { tmax = max2i(tmax, t3); bsum += b3()[0]; }

  minimize(tmax * 4 + bsum);
  */

  minimize((t1 + t2 + t3) * 6 + (b1()[0] + b1()[1] + b2()[0] + b2()[1] + b3()[0] + b3()[1]));
  //minimize(max2i(t1, max2i(t2, t3)) * 6 + (b1()[0] + b1()[1] + b2()[0] + b2()[1] + b3()[0] + b3()[1]));

#ifdef EXHAUST_IJ
  for (int i = 0; i < n; i++)
  for (int j = 0; j < n; j++) 
#endif
  {
  if (ind) {
     /*
      |scalar| val = f_i(n, thetaQ, i, j);
      if (X(i,j)) {
        assert h(n, theta, i, j) == val;
      }
      else if (Q(i,j)) {
        assert val == psi(i, j);
      }
      else {
        assert val == bot || val == psi(i,j);
      } */
     
      if (Q(i,j)) {
        assert h(n, theta, i, j) == h(n, thetaQ, i, j);
        assert h(n, thetaQ, i, j) == f_i(n, thetaQ, i, j);
      }
      
  }
  else {
      if (X(i,j)) {
        assert h(n, jones, i, j) == f_i(n, thetaQ, i, j);
      }
  }
  }
}

