package examples

import report.data.{Rich, DisplayContainer}
import syntax.AstSugar._
import syntax.Identifier
import syntax.transform.Extrude

import semantics.Prelude
import semantics.Prelude._
import semantics.{TypeTranslation, Scope, TypedLambdaCalculus, Trench}
import semantics.TypeTranslation.Environment
import semantics.TypedScheme.TermWithHole

import synth.pods._
import synth.pods.ConsPod.{`‚ü® ‚ü©`, `‚ü® ‚ü©?`}

import report.FileLog



object Gap {
  
  val J = TS("J")
  val K = TS("K")
  val J0 = TS("J‚ÇÄ")
  val J1 = TS("J‚ÇÅ")
  val K0 = TS("K‚ÇÄ")
  val K1 = TS("K‚ÇÅ")
  val L0 = TS("L‚ÇÄ")
  val L1 = TS("L‚ÇÅ")
  val L2 = TS("L‚ÇÇ")
  val L3 = TS("L‚ÇÉ")
  val M0 = TS("M‚ÇÄ")
  val M1 = TS("M‚ÇÅ")
  val M2 = TS("M‚ÇÇ")
  val M3 = TS("M‚ÇÉ")

  val w = TV("w")
  val `w'` = TV("w'")
  val S = TV("S")
  
  val f = TV("f")

  def J_< = T(new Identifier("<", "variable", ns=J))
  def K_< = T(new Identifier("<", "variable", ns=K))
  val _1 = TI(1)
  
  val program = TI("program")(
      w :: ((K x K) ‚à© K_<) -> R,
      `w'` :: ((J x J) ‚à© J_<) -> R,
      S :: (J x K) -> R
    )
    
  class APod(val J: Term, val K: Term) extends Pod {
    val A = TI("A")
    val (œà, Œ∏, i, j, p, q) = ($TV("œà"), $TV("Œ∏"), $TV("i"), $TV("j"), TV("p"), TV("q"))
    
    override val program = Prelude.program(
        A :- (œà ‚Ü¶ fix(
          ((Œ∏ :: (J x K) -> R) ‚Ü¶: i ‚Ü¶: j ‚Ü¶: (min :@
            `‚ü® ‚ü©`(
              œà:@(i,j),
              (Œ∏:@(i-_1, j-_1)) + (S:@(i,j)),
              min :@ (q ‚Ü¶ ((Œ∏:@(i,q)) + (w:@(q,j)))),
              min :@ (p ‚Ü¶ ((Œ∏:@(p,j)) + (`w'`:@(p,i))))
            )
          )) -: f
        ))
      )
  }
  
  object APod {
    def apply(J: Term, K: Term) = new APod(J, K)
  }
  
  class BPod(val J: Term, val K0: Term, val K1: Term) extends Pod {
    val B = TI("B")
    val (œà, Œ∏, i, j, p, q) = ($TV("œà"), $TV("Œ∏"), $TV("i"), $TV("j"), $TV("p"), $TV("q"))
    
    override val program = Prelude.program(
        B :- œà ‚Ü¶
          /::(
            œà :: ((J x K0) -> R),
            (i ‚Ü¶: j ‚Ü¶: (min :@ `‚ü® ‚ü©`(
              œà:@(i,j),
              (œà:@(i-_1, (j-_1)::K0)) + (S:@(i,j)),
              min :@ ((q::K0) ‚Ü¶ ((œà:@(i,q)) + (w:@(q,j))))
            ))) :: ((J x K1) -> R)
          )
        )
  }
  
  object BPod {
    def apply(J: Term, K0: Term, K1: Term) = new BPod(J, K0, K1)
  }


  implicit val env = {
    import semantics.Domains._
    val scope = new Scope

    List(R, N, J, K) foreach scope.sorts.declare

    List(J0 :<: J, J1 :<: J, K0 :<: K, K1 :<: K,
         L0 :<: J0, L1 :<: J0, L2 :<: J1, L3 :<: J1,
         M0 :<: K0, M1 :<: K0, M2 :<: K1, M3 :<: K1) foreach scope.sorts.declare

    scope.sorts.cork()

    TypeTranslation.subsorts(scope) where
      (compl(J)(J0, J1), compl(K)(K0, K1))
  }

  def main(args: Array[String]) = BreakDown.main(args)

  
  object BreakDown {
    
    def main(args: Array[String]): Unit = {
      implicit val scope = env.scope
      //rewriteA
      new Interpreter().executeFile("/tmp/synopsis.json")
    }

    import Paren.BreakDown.Interpreter

    class Interpreter(implicit scope: Scope) extends Paren.BreakDown.Interpreter {
      import Interpreter._
      /* This part is Gap-specific */
      override def pods(implicit s: State) = {
        case (L("A"), List(~(j), ~(k))) => APod(j, k)
        case (L("B"), List(~(j), ~(k0), ~(k1))) => BPod(j, k0, k1)
      }
    }


    import syntax.transform.Extrude
    import semantics.pattern.SimplePattern 
    import synth.tactics.Rewrite.{Rewrite,instantiate}
    import synth.pods.{SlicePod,StratifyPod,StratifyReducePod,MinDistribPod,MinAssocPod}
    import semantics.TypedLambdaCalculus.{simplify,pullOut}
    import syntax.Piping._
    import report.console.Console.display

    def instapod(it: Term)(implicit scope: Scope) = instantiate(it)._2
    def instapod(it: Pod)(implicit scope: Scope) = new Instantiated(it) // instantiate(it.program)._2
//    def instapod[A <: Pod](it: A)(implicit scope: Scope) = new Instantiated[A](it) // instantiate(it.program)._2

    class Instantiated[RawPod <: Pod](val it: RawPod)(implicit scope: Scope) extends Pod {
      override val program = instantiate(it.program)._2
      override val obligations = if (it.obligations == semantics.Prelude.program) program else instantiate(it.obligations)._2
    }

    val * = TI("*")
    val j = TV("j")
    val p = TV("p")
    val q = TV("q")
    
    def rewriteA(implicit env: Environment, scope: Scope) {
      val f = new FileLog(new java.io.File("/tmp/bell.json"), new DisplayContainer)
      val extrude = new Extrude(Set(I("/"), cons.root))

      def fixer(A: Term, q: Term) = SimplePattern(fix(?)) find A map (_.subterm) filter (_.hasDescendant(q)) head
      def fixee(A: Term, q: Term) = fixer(A, q).subtrees(0)
      def ctx(A: Term, t: Term) = TypedLambdaCalculus.enclosure(A, t).get map (x => (x.leaf.literal, x)) toMap

      val A = instantiate(APod(J, K).program, instantiate(program)._1)._2
      val ex = extrude(A) |-- display
      f += Rich.display(ex.terms)
      //return
      // Slice  f  [ J‚ÇÄ, J‚ÇÅ ] x [ K‚ÇÄ, K‚ÇÅ ]
      val slicef = SlicePod(A :/ "f" subtrees 1, List(J0 x K0, J0 x K1, J1 x K0, J1 x K1) map (? x _)) |> instapod
      f += slicef.obligations
      for (A <- Rewrite(slicef)(A)) {
        val ex = extrude(A) |-- display
        f += Rich.display(List(ex.terms))
        //return
        // Stratify  üÑ∞
        val strat = StratifySlashPod(fixee(A, ex :/ "üÑ∞"), ex :/ "üÑ∞", ctx(A, ex :/ "üÑ∞")("œà"))  |> instapod
        for (A <- Rewrite(strat)(A)) {
          val ex = extrude(A) |-- display
          f += Rich.display(List(ex.terms))
          // Stratify  üÑ∞
          val strat = StratifySlashPod(fixee(A, ex :/ "üÑ∞"), ex :/ "üÑ∞", ctx(A, ex :/ "üÑ∞")("œà"))  |> instapod
          for (A <- Rewrite(strat)(A)) {
            val ex = extrude(A) |-- display
            // Stratify  üÑ∞
            val strat = StratifySlashPod(fixee(A, ex :/ "üÑ∞"), ex :/ "üÑ∞", ctx(A, ex :/ "üÑ∞")("œà"))  |> instapod
            for (A <- Rewrite(strat)(A)) {
              val ex = extrude(A) |-- display
              // Slice  üÑ∞ ... q ‚Ü¶ ?  [ K‚ÇÄ, K‚ÇÅ ]
              //               p ‚Ü¶ ?  [ J‚ÇÄ, J‚ÇÅ ]
              //               Œ∏      [ J‚ÇÄ, J‚ÇÅ ] x [ K‚ÇÄ, K‚ÇÅ ]
              // Slice  üÑ± ... p ‚Ü¶ ?  [ J‚ÇÄ, J‚ÇÅ ]
              //               Œ∏      [ J‚ÇÄ, J‚ÇÅ ] x ?
              // Slice  üÑ≤ ... q ‚Ü¶ ?  [ K‚ÇÄ, K‚ÇÅ ]
              //               Œ∏      ? x [ K‚ÇÄ, K‚ÇÅ ]
              val slicea = (SimplePattern(q ‚Ü¶ ?) find ex :/ "üÑ∞" map (x => SlicePod(x.subterm, List(K0, K1)))) ++
                           (SimplePattern(p ‚Ü¶ ?) find ex :/ "üÑ∞" map (x => SlicePod(x.subterm, List(J0, J1)))) :+
                           (SlicePod((ex :/ "üÑ∞") ? "Œ∏", List(J0 x K0, J0 x K1, J1 x K0, J1 x K1)))
              val sliceb = (SimplePattern(p ‚Ü¶ ?) find ex :/ "üÑ±" map (x => SlicePod(x.subterm, List(J0, J1)))) :+
                           (SlicePod((ex :/ "üÑ±") ? "Œ∏", List(J0, J1) map (_ x ?)))
              val slicec = (SimplePattern(q ‚Ü¶ ?) find ex :/ "üÑ≤" map (x => SlicePod(x.subterm, List(K0, K1)))) :+
                           (SlicePod((ex :/ "üÑ≤") ? "Œ∏", List(K0, K1) map (? x _)))
              val slice = (slicea ++ sliceb ++ slicec) |>> instapod
              for (A <- Rewrite(slice)(A, SimplePattern(j ‚Ü¶ (* :- ?)) find A map (_(*)))) {
                val ex = extrude(A) |-- display
                // SlashDistrib  ?‚Éû  ?‚Éû ... /(...) :@ ?
                val dist = (ex.terminals flatMap (x => SimplePattern((* :- /::(`...`)) :@ ?) find x map (x ‚Üí _(*))) map
                            { case (x, y) => SlashDistribPod(x, y) }) |>> instapod
                for (A <- Rewrite(dist)(A)) {
                  val ex = extrude(A) |-- display
                  // SlashToReduce  cons(/({...}), ?)  [min]
                  val s2m = (SimplePattern(cons:@(* :- /::(`...`))) find A map (x => SlashToReducePod(x(*).split(I("/")), min))) |>> instapod
                  for (A <- Rewrite(s2m)(A)) {
                    // MinDistrib
                    val mindist = (SimplePattern(min :@ (* :- /::(`...`))) find A map 
                                   (x => MinDistribPod(x(*).split))) |>> instapod
                    for (A <- Rewrite(mindist)(A)) {
                      // MinAssoc
                      val minassoc = (SimplePattern(min :@ (* :- ?)) find A flatMap (_(*) |> `‚ü® ‚ü©?`) map
                                      (MinAssocPod(_)) filterNot (_.isTrivial)) |>> instapod
                      for (A <- Rewrite(minassoc)(A)) {
                        val ex = extrude(A) |-- display
                        // Stratify   üÑ¥, üÑµ      in  üÑ∞
                        //            üÑΩ, üÑæ, üÖÅ  in  üÑ±
                        //            üÖÉ, üÖÑ, üÖÜ  in  üÑ≤
                        def stratduce(A: Term, `.` : Term, subelements: List[Term]) =
                          SimplePattern(min:@(* :- ?)) find `.` flatMap (x => `‚ü® ‚ü©?`(x(*)) map (elements => 
                            StratifyReducePod(TermWithHole.puncture(fixee(A,`.`), x.subterm), min, elements, subelements, ctx(A, `.`)("œà"))))
                        val strat = stratduce(A, ex :/ "üÑ∞", List("üÑ¥", "üÑµ") map (ex :/ _)) ++
                                    stratduce(A, ex :/ "üÑ±", List("üÑΩ", "üÑæ", "üÖÅ") map (ex :/ _)) ++
                                    stratduce(A, ex :/ "üÑ≤", List("üÖÉ", "üÖÑ", "üÖÜ") map (ex :/ _)) |>> instapod
                        for (A <- Rewrite(strat)(A)) {
                          val ex = extrude(A) |-- display
                          // Stratify  üÑ∑, üÑ∏, üÑΩ  in  üÑ∞
                          val strat = stratduce(A, ex :/ "üÑ∞", List("üÑ∑", "üÑ∏", "üÑΩ") map (ex :/ _)) |>> instapod
                          for (A <- Rewrite(strat)(A)) {
                            val ex = extrude(A) |-- display
                            // Stratify  üÑ∏, üÑπ, üÑª  in  üÑ∞
                            val strat = stratduce(A, ex :/ "üÑ∞", List("üÑ∏", "üÑπ", "üÑª") map (ex :/ _)) |>> instapod
                            for (A <- Rewrite(strat)(A)) {
                              val ex = extrude(A) |-- display
                              // Synth  fix(... üÑ∞ ...)
                              import SlicePod.slices
                              val synth = (SimplePattern(fix(* :- /::(`...`))) find fixer(A, ex :/ "üÑ∏")) |>>
                                           (x => SynthSlashPod(slices(x(*)), slices(x(*)))) |>> instapod
                              for (A <- Rewrite(synth)(A)) {
                                val ex = extrude(A) |-- display
                                f += Trench.displayRich(new Trench[Term](List(ex.terms)))
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
        /*
        // Stratify  üÑ∞
        val strat = StratifyPod(fixer(A, ex :/ "üÑ∞") subtrees 0, ex :/ "üÑ∞", List(? x J0 x K0)) |> instapod
        for (A <- Rewrite(strat)(A)) {
          val ex = extrude(A) |-- display
          // Stratify  üÑ∞
          val strat = StratifyPod(fixer(A, ex :/ "üÑ∞") subtrees 0, ex :/ "üÑ∞", List(? x J0 x K0)) |> instapod
          for (A <- Rewrite(strat)(A)) {
            val ex = extrude(A) |-- display
            // Stratify  üÑ∞
            val strat = StratifyPod(fixer(A, ex :/ "üÑ∞") subtrees 0, ex :/ "üÑ∞", List(? x J0 x K0)) |> instapod
            for (A <- Rewrite(strat)(A) map simplify) {
              val ex = extrude(A) |-- display
              // Slice  üÑ∞ ... q ‚Ü¶ ?  [ K‚ÇÄ, K‚ÇÅ ]
              //               p ‚Ü¶ ?  [ J‚ÇÄ, J‚ÇÅ ]
              //               Œ∏      [ J‚ÇÄ, J‚ÇÅ ] x [ K‚ÇÄ, K‚ÇÅ ]
              // Slice  üÑ± ... p ‚Ü¶ ?  [ J‚ÇÄ, J‚ÇÅ ]
              //               Œ∏      [ J‚ÇÄ, J‚ÇÅ ] x ?
              // Slice  üÑ≤ ... q ‚Ü¶ ?  [ K‚ÇÄ, K‚ÇÅ ]
              //               Œ∏      ? x [ K‚ÇÄ, K‚ÇÅ ]
              val slicea = (SimplePattern(q ‚Ü¶ ?) find ex :/ "üÑ∞" map (x => SlicePod(x.subterm, List(K0, K1)))) ++
                           (SimplePattern(p ‚Ü¶ ?) find ex :/ "üÑ∞" map (x => SlicePod(x.subterm, List(J0, J1)))) :+
                           (SlicePod((ex :/ "üÑ∞") ? "Œ∏", List(J0 x K0, J0 x K1, J1 x K0, J1 x K1)))
              val sliceb = (SimplePattern(p ‚Ü¶ ?) find ex :/ "üÑ±" map (x => SlicePod(x.subterm, List(J0, J1)))) :+
                           (SlicePod((ex :/ "üÑ±") ? "Œ∏", List(J0, J1) map (_ x ?)))
              val slicec = (SimplePattern(q ‚Ü¶ ?) find ex :/ "üÑ≤" map (x => SlicePod(x.subterm, List(K0, K1)))) :+
                           (SlicePod((ex :/ "üÑ≤") ? "Œ∏", List(K0, K1) map (? x _)))
              val slice = (slicea ++ sliceb ++ slicec) |>> instapod
              for (A <- Rewrite(slice)(A, SimplePattern(j ‚Ü¶ (* :- ?)) find A map (_(*)))) {
                val ex = extrude(A) |-- display
                // SlashDistrib  ?‚Éû  ?‚Éû ... /(...) :@ ?
                val dist = (ex.terminals flatMap (x => SimplePattern((* :- /::(`...`)) :@ ?) find x map (x ‚Üí _(*))) map
                            { case (x, y) => SlashDistribPod(x, y) }) |>> instapod
                for (A <- Rewrite(dist)(A)) {
                  val ex = extrude(A) |-- display
                  // SlashToReduce  cons(/({...}), ?)  [min]
                  val s2m = (SimplePattern(cons:@(* :- /::(`...`))) find A map (x => SlashToReducePod(x(*).split(I("/")), min))) |>> instapod
                  for (A <- Rewrite(s2m)(A)) {
                    // MinDistrib
                    val mindist = (SimplePattern(min :@ (* :- /::(`...`))) find A map 
                                   (x => MinDistribPod(x(*).split))) |>> instapod
                    for (A <- Rewrite(mindist)(A)) {
                      // MinAssoc
                      val minassoc = (SimplePattern(min :@ (* :- ?)) find A flatMap (_(*) |> MinAssocPod.`‚ü® ‚ü©?`) map
                                      (MinAssocPod(_)) filter (x => x.subtrees(0) != x.subtrees(1))) |>> instapod
                      for (A <- Rewrite(minassoc)(A)) {
                        val ex = extrude(A) |-- display
                        // Stratify  üÑæ, üÖÅ, üÖÉ  in  üÑ±
                        //           üÖÖ, üÖá, üÑ∞Ã±  in  üÑ≤
                        //           üÑ¥, üÑº      in  üÑ∞
                        val strat = List(StratifyReducePod(ex :/ "üÑ±" subtrees 0, List("üÑæ", "üÖÅ", "üÖÉ") map (ex :/ _)),
                                         StratifyReducePod(ex :/ "üÑ≤" subtrees 0, List("üÖÖ", "üÖá", "üÑ∞Ã±") map (ex :/ _)),
                                         StratifyReducePod(fixer(A, ex :/ "üÑ∞") subtrees 0, List("üÑ¥", "üÑº") map (ex :/ _))) |>> instapod
                        for (A <- Rewrite(strat)(A)) {
                          val ex = extrude(A) |-- display
                          // Stratify  üÑµ, üÑ∏, üÑº  in  üÑ∞
                          val strat = StratifyReducePod(fixer(A, ex :/ "üÑ∞") subtrees 0, List("üÑµ", "üÑ∏", "üÑº") map (ex :/ _)) |> instapod
                          for (A <- Rewrite(strat)(A)) {
                            val ex = extrude(A) |-- display
                            // Stratify  üÑ∂, üÑπ, üÑª  in  üÑ∞
                            val strat = StratifyReducePod(fixer(A, ex :/ "üÑ∞") subtrees 0, List("üÑ∂", "üÑπ", "üÑª") map (ex :/ _)) |> instapod
                            for (A <- Rewrite(strat)(A) map simplify) {
                              val ex = extrude(A) |-- display
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }    
          }    
        }
      }*/
    }
    
  }

}