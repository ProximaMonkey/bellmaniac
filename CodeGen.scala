// Turn functions into NumPy tables
// Treat first 'dom' arguments as indexes into tables
// Expects input programs to be flattened
class NumPython(val dom: Int) extends PythonPrinter {
  assert (dom > 0)
  def prelude = """# autogenerated by bellmaniac
import sys
plus = min
zero = sys.maxint
DIM = 64
MIN = 0
MAX = 1000
from numpy import *
""" 
 
  private def print(l: List[Expr]): String = l.map(print(_)).mkString(", ")  
  private def indent(tabs: Int = dom+1) = (1 to tabs).map(_ => "  ").mkString("")

  import Transform.{transform, visit}
  
  // create T value
  val T = Var("T", dom)

  // current algorithm
  private var scope: Algorithm = _ 
  private var offv: List[Var] = _

  // all computations
  private var all: List[Computation] = _  
  
  def inputs = all.collect { case i: Input => i }
  def algorithms = all.collect { case a: Algorithm => a }

  override def print(e: Expr) = e match {
    case App(v: Var, args) => 
      if (inputs.exists(_.v == v) || scope.args.contains(v)) 
        print(v) + "[" + print(args) + "]"
      // used for self-recursion (must preserver non-dom arguments)
      else if (scope.v == v && args.drop(dom) == scope.args.drop(dom))
        "T[" + print(args.take(dom) zip offv map { case (a, o) => a + o }) + "]"            
      else { 
        error("should be unreachable app: " + v + " in " + scope.v)
        ???
      }
    case _: OpVar =>
      error("should be unreachable")
      ???
    case v: Var if v.arity > 0 =>
      assert(inputs.exists(_.v == v) || scope.args.contains(v) || 
        v.name.startsWith("T"), 
        "can only pass tables as parameters: " + v)    
      v.name
    case _ => super.print(e)
  }

  // Write to T at offset off by invoking v with rest
  case class Write(v: Var, T: Var, off: List[Expr], rest: List[Expr]) {
    assert (v.arity == off.size + rest.size, "must match arity")
    assert (off.size == dom && T.arity == dom)
    override def toString = v.name + "("  + print(T :: off ::: rest) + ")" 
  }

  object Write {
    // top-level write
    def make(app: App): List[Write] =
      make(app, T, offv, scope.args.take(dom))

    // offv is offsets for T
    // outputs list of write with last corresponding to this "app"
    def make(app: App, T: Var, offv: List[Expr], formal: List[Var]): List[Write] = app match {
      case App(v: Var, args) =>
        val offsets = (args.take(dom) zip formal).map {
          case (actual, formal) => Linear(formal - actual) 
        }.flatten        
       
        var out: List[Write] = Nil 

        // recurse on dependency OpVars
        val rest = for (arg <- args.drop(dom)) yield transform(arg) {
          case OpVar(v, args, exprs) =>
            assert(v.isInstanceOf[Var], "must be flattened")
            assert(exprs.startsWith(args), "must be fully linearized")
            assert(args.size == dom, "must match dom")            
            val T1 = T.fresh
            // todo: extract offsets from the opvar
            out = out ::: make(App(v, exprs), T1, List.fill(dom)(Const(0)), args) 
            T1
        }
        
        if (offsets.size == dom) 
          out ::: Write(v, T, (offv zip offsets).map { case (a, o) => a + o.expr }, rest) :: Nil
        else {
          error("cannot resolve offsets: " + app)
          Nil
        }
    }
  }

  override def print(c: Computation) = c match {
    case Input(v) =>
      print(v) + " = " + {
        if (v.arity == 0) 
          "DIM" 
        else 
          "random.randint(MIN, MAX, size=(" + 
          (1 to v.arity).map(_ => "DIM").mkString(", ") + "))"
      }
    case a @ Algorithm(v, args, pre, e) =>        
      this.scope = a
      this.offv = args.take(dom).map { case Var(n, i) => Var("o" + n, i) }
      val loop = new LoopConstruct(a)

      // memory allocation function
      "def " + v.name +"_alloc(" + print(args.drop(dom)) + "):\n" + 
      "  return " + new MemorySpec(a).alloc + "\n" +      
      // detect if it's a split and act appropriately
      "def " + v.name + "(" + print(T :: offv ::: args.drop(dom)) + "):\n" + {
        e match {
          case Cond(cases, Havoc) if cases.forall(_._2.isInstanceOf[App]) =>
            cases match {
              case (minp, mine) :: splits =>
                // double check that splits are coming from the tactic
                val (preds, es) = splits.unzip
                for (p1 <- preds; p2 <- preds; if p1 != p2)
                  assert(SMT.prove((pre and p1) implies (! p2)))

                
                "  if " + print(minp) + ":\n    " + 
                (for (w <- Write.make(mine.asInstanceOf[App])) yield w.toString).mkString("\n  ") + 
                "\n    return\n" +                 
                "  " + (for (e <- es; w <- Write.make(e.asInstanceOf[App])) yield w.toString).mkString("\n  ")
              case _ => ???
            }

          case _ =>
            // compute with the loop construct
            val (lvars, lbounds, lmap) = loop.generate

            {for (((lv, Range(l, h)), i) <- lvars zip lbounds zipWithIndex) 
              yield indent(i+1) + "for "+print(lv)+" in xrange("+print(l)+","+print(h)+"):\n"
            }.mkString("") + 
            {for ((l,i) <- lmap zipWithIndex) 
              yield indent() + args(i)+" = "+lmap(i)+"\n"
            }.mkString("") +
            indent() + "assert " + print(pre) + "\n" +   
            indent() + print(App(v, args)) + " = " + print(e)
        }
      }
  }
 
  override def print(p: List[Computation], out: java.io.PrintStream) {
    this.all = p
    super.print(p, out)
  }

  // Generate loop construct for an algorithm
  // Additional references:
  //    polyhedral model on wiki
  //    Omega library tutorials (e.g. SUIF)

  case class Rotation(flips: List[Boolean]) {  
    def apply(a: List[Expr]) = a zip flips map { 
      case (x, false) => x
      case (x, true) => Const(0) - x
    }
    def inverse = this
  }
  object Rotation {
    def all(d: Int): Iterator[Rotation] =   
      if (d == 0)
        List(Rotation(Nil)).iterator
      else
        (all(d-1) map { case Rotation(flips) => Rotation(false :: flips) }) ++
        (all(d-1) map { case Rotation(flips) => Rotation(true :: flips) })
  }

  case class Vector(path: Pred, v: Var, c: List[Expr])

  
  class LoopConstruct(a: Algorithm) extends Logger {
    val pre = a.pre
    val c = a.args.take(dom)
    
    // find all recursion references
    def vectors = {
      var out: List[Vector] = Nil
      transform(a) {
        case (path, locals, App(v, vargs)) =>
          if (v == a.v)
            out = Vector(path, a.v, vargs.take(dom)) :: out
          else if (! locals.contains(v) && ! inputs.exists(_.v == v))
            error("unexpected: " + v + " in " + a.v)
          Havoc
      }
      out
    }

    // domination order
    def LE(a: List[Expr], b: List[Expr]) = 
      a zip b map { case (x, y) => x <= y} reduce(And)
    
    // find domination order orientation
    def orient(vs: List[Vector]): Rotation = {
      for (r <- Rotation.all(dom))
        if (vs.forall { case Vector(p, _, v) => SMT.prove(p implies LE(r(v), r(c))) })
          return r
      error("can't orient in domination order")
      ???
    }
    implicit def int2rat(n: Int) = new Rational(n, 1)
    implicit def int2expr(n: Int) = Const(n)
    implicit def int2linear(n: Int) = Linear.make(Map(), new Rational(n, 1))

    // solve for max expression
    def MAX(p: List[Expr], pred: Pred): Expr = p match {
      case Nil => ???
      case e :: Nil => e
      case e :: p1 =>
        val e1 = MAX(p1, pred)
        if (SMT.prove(pred implies e1 <= e))
          e
        else if (SMT.prove(pred implies e <= e1))
          e1
        else {
          error("can't find max of " + p + " under " + pred)
          ???
        }
    }

    // solve for min expression
    def MIN(p: List[Expr], pred: Pred): Expr = p match {
      case Nil => ???
      case e :: Nil => e
      case e :: p1 =>
        val e1 = MIN(p1, pred)
        if (SMT.prove(pred implies e <= e1))
          e
        else if (SMT.prove(pred implies e1 <= e))
          e1
        else {
          error("can't find min of " + p + " under " + pred)
          ???
        }
    }

    // Infer range constraints from linear constraints in predicate
    def inferBounds(p: List[Var], pred: Pred, 
      use: Boolean = true, transitive: Boolean = false): Option[List[Range]] = {
      var eqs = Linear.equations(pred)

      // compute transitive equations by eliminating one variable at a time
      if (transitive) 
        eqs = eqs ::: {
          for (v <- p;
            e1 <- eqs if e1.proj(v) > 0;
            e2 <- eqs if e2.proj(v) < 0) yield 
            e1 * e2.proj(v) * (-1) + e2 * e1.proj(v)         
          }
      

      // free variables (allowed to appear in result range)
      var free = Vars(pred) -- p
      
      var out: List[Range] = Nil
      for (v <- p) {       
        // find constraints only contains "free" vars and having "v"
        val bounds = eqs.filter { case eq => eq.has(v) && eq.vars.subsetOf(free + v) }
      
        // upper and lower bound expressions
        val lower = bounds.filter(_.proj(v) > 0).map { 
          case eq => 0 - (eq.drop(v) / eq.proj(v)) }.map(_.expr)
        val upper = bounds.filter(_.proj(v) < 0).map { 
          case eq => 1 - (eq.drop(v) / eq.proj(v)) }.map(_.expr)

        if (lower.size == 0 || upper.size == 0)
          return None

        // use previous variables in generating subsequent range bound
        if (use)
          free = free + v

        out = Range(MAX(lower, pred), MIN(upper, pred)) :: out
      }

      return Some(out.reverse)
    }


    // generate looping construct for first "dom" parameters of "a"
    // returns (list of iteration variables, list of their ranges, assignment to actual variables)
    def generate: (List[Var], List[Range], List[Expr]) = {
      // orient dependency vectors by flipping +/- coordinates so that they point
      // into lower-left corner
      val r = orient(vectors)

      // find iteration order and bounds
      // create fresh variables: c1 = r(c)
      val c1 = c.map { case Var(n, i) => Var(n +"0", i) }
      
      // formulate pre in terms of c1
      val exprs = r.inverse(c1)
      val pre1 = pre.s(c zip exprs)

      // try to order variables so that we can solve them one by one
      for (p <- c1.permutations) 
        inferBounds(p, pre1) match {
          case Some(ranges) => return (p, ranges, exprs)
          case _ =>
        }
     
      message("can't infer bounds")
      println(pre1)
      ???
    }
  }

  // Specifies read/write ranges 
  // (reads are applications of arguments under path conditions for given x in DOM)
  // (writes are bounds on DOM)
  // In particular, we can write into tables used in read as long as it's same x
  class MemorySpec(a: Algorithm) {
    // table dimensions (range from 0 to Expr)
    def write: List[Expr] = new LoopConstruct(a).inferBounds(a.args.take(dom), a.pre, false, true) match {
      case Some(ranges) =>
        for (Range(l, h) <- ranges) yield {
          if (! SMT.prove(a.pre implies l >= Const(0)))
            error("can't allocate memory with possibly negative index")
          h
        }
      case None => 
        error("can't infer memory allocation bounds")
        ???
    }

    def alloc = "zeros((" + print(write) + "), int)"
    
    def read: List[Vector] = {
      var out: List[Vector] = Nil      
      transform(a) {
        case (path, _, App(v: Var, vargs)) if a.args.contains(v) && v.arity == dom =>
          out = Vector(path, v, vargs) :: out
          Havoc
        case (_, _, v) if a.args.contains(v) && v.arity == dom =>
          error("unexpected pass of an argument function")
          Havoc
      }
      out
    }
  }
}
